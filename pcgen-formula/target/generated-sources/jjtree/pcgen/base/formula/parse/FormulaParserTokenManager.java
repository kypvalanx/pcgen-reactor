/* FormulaParserTokenManager.java */
/* Generated by:  JJTree&ParserGeneratorCC: Do not edit this line. FormulaParserTokenManager.java */
package pcgen.base.formula.parse;

/** Token Manager. */
public class FormulaParserTokenManager implements FormulaParserConstants {
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case '.':
         return jjStopAtPos(0, 30);
      default :
         return jjMoveNfa_0(46, 0);
   }
}
static final long[] jjbitVec0 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 81;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0xfffffffbffffdbffL & l) != 0x0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddStates(3, 42); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 41)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAdd(19); }
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 18)
                        kind = 18;
                     { jjCheckNAdd(17); }
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAdd(15); }
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 15)
                        kind = 15;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 14)
                        kind = 14;
                     { jjCheckNAdd(9); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAdd(7); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 60)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(27); }
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(25); }
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 10)
                        kind = 10;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 0:
                  if (curChar != 33)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if (curChar != 32)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar != 43)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(3); }
                  break;
               case 3:
                  if (curChar != 32)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar != 45)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if (curChar != 32)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(5); }
                  break;
               case 6:
                  if (curChar != 42)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(7); }
                  break;
               case 7:
                  if (curChar != 32)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if (curChar != 47)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if (curChar != 32)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if (curChar != 37)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(11); }
                  break;
               case 11:
                  if (curChar != 32)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(11); }
                  break;
               case 13:
                  if (curChar != 32)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar != 44)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if (curChar != 32)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar != 40)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(17); }
                  break;
               case 17:
                  if (curChar != 32)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if (curChar != 41)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(19); }
                  break;
               case 19:
                  if (curChar != 32)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(19); }
                  break;
               case 21:
                  if (curChar != 32)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar != 32)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar != 62)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(25); }
                  break;
               case 25:
                  if (curChar != 32)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if (curChar != 60)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(27); }
                  break;
               case 27:
                  if (curChar != 32)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if (curChar != 61)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(29); }
                  break;
               case 29:
                  if (curChar != 32)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(29); }
                  break;
               case 30:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar != 61)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAdd(32); }
                  break;
               case 32:
                  if (curChar != 32)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar != 61)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(35); }
                  break;
               case 35:
                  if (curChar != 32)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (curChar != 61)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(38); }
                  break;
               case 38:
                  if (curChar != 32)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(38); }
                  break;
               case 39:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar != 38)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(41); }
                  break;
               case 41:
                  if (curChar != 32)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar != 32)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((0x7ff400100000000L & l) != 0x0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 48:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 49:
                  if ((0x7ff400100000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0x0L && kind > 35)
                     kind = 35;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(51); }
                  break;
               case 52:
                  if ((0xfffffffbffffdbffL & l) != 0x0L && kind > 37)
                     kind = 37;
                  break;
               case 54:
                  if ((0x8400000000L & l) != 0x0L && kind > 38)
                     kind = 38;
                  break;
               case 55:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 56:
                  if ((0xfffffffbffffdbffL & l) != 0x0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 58:
                  if ((0x8400000000L & l) != 0x0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 59:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 60:
                  if (curChar == 32)
                     { jjCheckNAddStates(3, 42); }
                  break;
               case 61:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(61, 0); }
                  break;
               case 62:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(62, 2); }
                  break;
               case 63:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(63, 4); }
                  break;
               case 64:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(64, 6); }
                  break;
               case 65:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(65, 8); }
                  break;
               case 66:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(66, 10); }
                  break;
               case 67:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(67, 12); }
                  break;
               case 68:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(68, 14); }
                  break;
               case 69:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(69, 16); }
                  break;
               case 70:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(70, 18); }
                  break;
               case 71:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(71, 20); }
                  break;
               case 72:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(72, 22); }
                  break;
               case 73:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(73, 24); }
                  break;
               case 74:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(74, 26); }
                  break;
               case 75:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(75, 30); }
                  break;
               case 76:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(76, 33); }
                  break;
               case 77:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(77, 36); }
                  break;
               case 78:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(78, 39); }
                  break;
               case 79:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(79, 42); }
                  break;
               case 80:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(80, 45); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0xffffffffefffffffL & l) != 0x0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  if ((0x7fffffe07fffffeL & l) != 0x0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAddStates(43, 45); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 93)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjstateSet[jjnewStateCnt++] = 23;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjstateSet[jjnewStateCnt++] = 21;
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjstateSet[jjnewStateCnt++] = 13;
                  }
                  break;
               case 12:
                  if (curChar != 94)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 20:
                  if (curChar != 91)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if (curChar != 93)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 43:
                  if (curChar != 124)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0x47fffffe87fffffeL & l) != 0x0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 49:
                  if ((0x47fffffe87fffffeL & l) != 0x0L)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if ((0x47fffffe07fffffeL & l) != 0x0L && kind > 35)
                     kind = 35;
                  break;
               case 52:
                  if ((0xffffffffefffffffL & l) != 0x0L && kind > 37)
                     kind = 37;
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x14404410000000L & l) != 0x0L && kind > 38)
                     kind = 38;
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0x0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 57:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x14404410000000L & l) != 0x0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAddStates(43, 45); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 35)
                     kind = 35;
                  break;
               case 52:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 37)
                     kind = 37;
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 81 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\56", null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   56, 57, 59, 61, 0, 62, 2, 63, 4, 64, 6, 65, 8, 66, 10, 67, 
   12, 68, 14, 69, 16, 70, 18, 71, 20, 72, 22, 73, 24, 74, 26, 75, 
   30, 76, 33, 77, 36, 78, 39, 79, 42, 80, 45, 47, 48, 50, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try {
     input_stream.readChar();
     input_stream.backup(1);
   }
   catch (final java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.getImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.getImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public FormulaParserTokenManager(SimpleCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public FormulaParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 81; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xf87ffffc01L, 
};
static final long[] jjtoSkip = {
   0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[81];
    private final int[] jjstateSet = new int[2 * 81];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
