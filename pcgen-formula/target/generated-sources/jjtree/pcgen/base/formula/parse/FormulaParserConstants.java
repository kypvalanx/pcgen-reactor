/* Generated by:  JJTree&ParserGeneratorCC: Do not edit this line. FormulaParserConstants.java */
package pcgen.base.formula.parse;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface FormulaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PERCENT = 1;
  /** RegularExpression Id. */
  int COLON = 2;
  /** RegularExpression Id. */
  int HYPHEN = 3;
  /** RegularExpression Id. */
  int SOLIDUS = 4;
  /** RegularExpression Id. */
  int EQUALSIGN = 5;
  /** RegularExpression Id. */
  int UNDERSCORE = 6;
  /** RegularExpression Id. */
  int TILDE = 7;
  /** RegularExpression Id. */
  int SPACE = 8;
  /** RegularExpression Id. */
  int O_SPACE = 9;
  /** RegularExpression Id. */
  int EXCLAMATION = 10;
  /** RegularExpression Id. */
  int PLUS = 11;
  /** RegularExpression Id. */
  int MINUS = 12;
  /** RegularExpression Id. */
  int MULT = 13;
  /** RegularExpression Id. */
  int DIV = 14;
  /** RegularExpression Id. */
  int REM = 15;
  /** RegularExpression Id. */
  int POW = 16;
  /** RegularExpression Id. */
  int COMMA = 17;
  /** RegularExpression Id. */
  int OPENPAREN = 18;
  /** RegularExpression Id. */
  int CLOSEPAREN = 19;
  /** RegularExpression Id. */
  int OPENBRACKET = 20;
  /** RegularExpression Id. */
  int CLOSEBRACKET = 21;
  /** RegularExpression Id. */
  int GT = 22;
  /** RegularExpression Id. */
  int LT = 23;
  /** RegularExpression Id. */
  int GTEQ = 24;
  /** RegularExpression Id. */
  int LTEQ = 25;
  /** RegularExpression Id. */
  int EQUAL = 26;
  /** RegularExpression Id. */
  int NOTEQUAL = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int FULLSTOP = 30;
  /** RegularExpression Id. */
  int DIGIT = 31;
  /** RegularExpression Id. */
  int BASIC_LETTER = 32;
  /** RegularExpression Id. */
  int FINAL_LETTER = 33;
  /** RegularExpression Id. */
  int MID_LETTER = 34;
  /** RegularExpression Id. */
  int VARIABLE = 35;
  /** RegularExpression Id. */
  int INT = 36;
  /** RegularExpression Id. */
  int STRING_FORBIDDEN = 37;
  /** RegularExpression Id. */
  int STRING_ESCAPED = 38;
  /** RegularExpression Id. */
  int STRING_LITERAL = 39;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"%\"",
    "\":\"",
    "\"-\"",
    "\"/\"",
    "\"=\"",
    "\"_\"",
    "\"~\"",
    "\" \"",
    "<O_SPACE>",
    "<EXCLAMATION>",
    "<PLUS>",
    "<MINUS>",
    "<MULT>",
    "<DIV>",
    "<REM>",
    "<POW>",
    "<COMMA>",
    "<OPENPAREN>",
    "<CLOSEPAREN>",
    "<OPENBRACKET>",
    "<CLOSEBRACKET>",
    "<GT>",
    "<LT>",
    "<GTEQ>",
    "<LTEQ>",
    "<EQUAL>",
    "<NOTEQUAL>",
    "<AND>",
    "<OR>",
    "\".\"",
    "<DIGIT>",
    "<BASIC_LETTER>",
    "<FINAL_LETTER>",
    "<MID_LETTER>",
    "<VARIABLE>",
    "<INT>",
    "<STRING_FORBIDDEN>",
    "<STRING_ESCAPED>",
    "<STRING_LITERAL>",
  };

}
